
import OcsKeys._
import edu.gemini.osgi.tools.Version
import edu.gemini.osgi.tools.app.{ Configuration => AppConfig, _ }
import edu.gemini.osgi.tools.app.Configuration.Distribution.{ Test => TestDistro, _ }

object OcsCredentials {

  object Ot {
    def common_credentials(version: Version) = AppConfig(
      id = "common_credentials"
    )
  }

  object Qpt {

    // COMMON
    def common_credentials(version: Version) = AppConfig(
      id = "common_credentials",
      props = Map(
        "edu.gemini.qpt.ui.action.destination.user" -> ""
      )
    )


    def with_test_dbs_credentials(version: Version) = AppConfig(
      id = "with-test-dbs-credentials",
      props = Map(
      )
    )

    def with_production_dbs_credentials(version: Version) = AppConfig(
      id = "with-production-dbs-credentials",
      props = Map(
      )
    )

    def development_credentials(version: Version) = AppConfig(
      id = "development_credentials",
      props = Map(
      )
    )

  }

  object Spdb {

    // COMMON
    def common_credentials(version: Version) = AppConfig(
      id = "common_credentials",
      props = Map(
        "edu.gemini.spModel.gemini.obscomp.key" -> "",
        "edu.gemini.auxfile.fits.password"      -> "",
        "edu.gemini.auxfile.fits.user"          -> "",
        "edu.gemini.auxfile.other.password"     -> "",
        "edu.gemini.auxfile.other.user"         -> "",
        "edu.gemini.dataman.xfer.pass.gsa"      -> "",
        "edu.gemini.dataman.xfer.user.gsa"      -> "",
        "edu.gemini.smartgcal.svnPassword"      -> "",
        "edu.gemini.smartgcal.svnUser"          -> "",
        "edu.gemini.smartgcal.uploadPassword"   -> "",
        "org.ops4j.pax.web.ssl.keypassword"     -> "",
        "org.ops4j.pax.web.ssl.password"        -> "",
        "edu.gemini.ictd.gn"                    -> "",
        "edu.gemini.ictd.gs"                    -> "",
        "edu.gemini.ictd.user"                  -> "",
        "edu.gemini.ictd.password"              -> "",
        // do these need to be private?
        "edu.gemini.services.telescope.schedule.calendar.id.north"  -> "",
        "edu.gemini.services.telescope.schedule.calendar.id.south"  -> "",
        "edu.gemini.services.telescope.schedule.calendar.url.north" -> "",
        "edu.gemini.services.telescope.schedule.calendar.url.south" -> ""
      )
    )

    // WITH-GOGO
    def with_gogo_credentials(version: Version) = AppConfig(
      id = "with-gogo-credentials"
    )

    // WITH-REMOTE-GOGO
    def with_remote_gogo_credentials(version: Version) = AppConfig(
      id = "with-remote-gogo-credentials"
    )

    // CONFIGS
    def rnorris_credentials(version: Version) = AppConfig(id = "rnorris_credentials")
    def swalker_credentials(version: Version) = AppConfig(id = "swalker_credentials")
    def dnavarro_credentials(version: Version) = AppConfig(id = "dnavarro_credentials")
    def fnussber_credentials(version: Version) = AppConfig(id = "fnussber_credentials")
    def olesja_credentials(version: Version) = AppConfig(id = "olesja_credentials")
    def sraaphorst_credentials(version: Version) = AppConfig(id = "sraaphorst_credentials")
    def cquiroz_credentials(version: Version) = AppConfig(id = "cquiroz_credentials")
    def anunez_credentials(version: Version) = AppConfig(id = "anunez_credentials")
    def jluhrs_credentials(version: Version) = AppConfig(id = "jluhrs_credentials")
    def abrighton_credentials(version: Version) = AppConfig(id = "abrighton_credentials")
    def gnodbtest_credentials(version: Version) = AppConfig(id = "gnodbtest_credentials")
    def gnodb_credentials(version: Version) = AppConfig(id = "gnodb_credentials")
    def gsodbtest_credentials(version: Version) = AppConfig(id = "gsodbtest_credentials")
    def gsodb_credentials(version: Version) = AppConfig(id = "gsodb_credentials")


    // ODBTEST
    def odbtest_credentials(version: Version) = AppConfig(
      id = "odbtest_credentials",
      vmargs = List(
        "-Dcron.*.edu.gemini.dbTools.html.ftpAccount=",
        "-Dcron.*.edu.gemini.dbTools.html.ftpPassword=",
        "-Dcron.reports.edu.gemini.spdb.reports.public.password=",
        "-Dcron.reports.edu.gemini.spdb.reports.public.username="
      )
    )

    // ODBPRODUCTION
    def odbproduction_credentials(version: Version) = AppConfig(
      id = "odbproduction_credentials",
      vmargs = List(
        "-Dcron.*.edu.gemini.dbTools.html.ftpAccount=",
        "-Dcron.*.edu.gemini.dbTools.html.ftpPassword=",
        "-Dcron.reports.edu.gemini.spdb.reports.public.password=",
        "-Dcron.reports.edu.gemini.spdb.reports.public.username="
      ),
      props = Map(
        "edu.gemini.services.telescope.schedule.calendar.id.north"  -> "",
        "edu.gemini.services.telescope.schedule.calendar.url.north" -> "",
        "edu.gemini.services.telescope.schedule.calendar.id.south"  -> "",
        "edu.gemini.services.telescope.schedule.calendar.url.south" -> ""
      )
    )
  }

}

